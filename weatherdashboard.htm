
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <title>Live Weather Graph</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #mqttStatus {
            margin-bottom: 10px;
            text-align: left;
            font-size: 0.8em;
            font-weight: bold;
        }
        .dot {
            height: 10px;
            width: 10px;
            border-radius: 30%;
            display: inline-block;
        }
        .green {
            background-color: green;
        }
        .red {
            background-color: red;
        }
        .orange {
            background-color: orange;
        }
        .pulse {
            animation: pulse 1s infinite;
        }
        .pulse-once {
            animation: pulse-once 1s;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        @keyframes pulse-once {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        #forecast {
            margin-bottom: 10px;
            text-align: left;
            font-size: 1.2em;
            font-weight: bold;
        }
        #stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
            font-size: 1.2em;
            font-weight: bold;
        }
        #stats div {
            padding: 10px 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 2px 2px 12px #aaa;
            background-color: #f9f9f9;
        }
        canvas {
            border: 1px solid #ccc;
            box-shadow: 2px 2px 12px #aaa;
        }
    </style>
</head>
<body>
    <div id="mqttStatus"><span id="connectionDot" class="dot red"></span> MQTT: Disconnected</div>
    <div id="forecast">Forecast: Loading...</div>
    <div id="stats">
        <div id="maxWindSpeed">Max Wind Speed: 0 mph</div>
        <div id="maxTemp">Max Temperature: 0 °C</div>
        <div id="minTemp">Min Temperature: 0 °C</div>
        <div id="maxPressure">Max Pressure: 0 mbar</div>
        <div id="minPressure">Min Pressure: 0 mbar</div>
    </div>
    <canvas id="weatherChart" width="800" height="400"></canvas>

<script>
    // MQTT connection settings
    var mqtt;
    var reconnectTimeout = 2000;
    var host = "mqtt.cetools.org";
    var port = location.protocol === 'https:' ? 8081 : 8080;
    var options = {
        timeout: 3,
        useSSL: location.protocol === 'https:',
    };
    var clientID = "clientID" + parseInt(Math.random() * 100);

    function updateConnectionStatus(status) {
        const dot = document.getElementById("connectionDot");
        if (status === "connected") {
            dot.className = "dot green";
            document.getElementById("mqttStatus").innerHTML = `<span class="dot green" id="connectionDot"></span> MQTT: Connected`;
        } else if (status === "disconnected") {
            dot.className = "dot red";
            document.getElementById("mqttStatus").innerHTML = `<span class="dot red" id="connectionDot"></span> MQTT: Disconnected`;
        } else if (status === "reconnecting") {
            dot.className = "dot orange";
            document.getElementById("mqttStatus").innerHTML = `<span class="dot orange" id="connectionDot"></span> MQTT: Reconnecting`;
        }
    }

    function pulseDot() {
        const dot = document.getElementById("connectionDot");
        dot.classList.add("pulse-once");
        setTimeout(() => {
            dot.classList.remove("pulse-once");
        }, 1000);
    }

    function MQTTconnect() {
        console.log("Connecting to " + host + " on port " + port);
        updateConnectionStatus("reconnecting");
        
        if (mqtt && mqtt.isConnected()) {
            mqtt.disconnect();
        }
        
        mqtt = new Paho.MQTT.Client(host, port, clientID);
        mqtt.onMessageArrived = onMessageArrived;
        mqtt.onConnectionLost = function(responseObject) {
            if (responseObject.errorCode !== 0) {
                console.log("Connection Lost: " + responseObject.errorMessage);
                updateConnectionStatus("disconnected");
                setTimeout(MQTTconnect, reconnectTimeout);
            }
        };
        mqtt.connect({
            ...options,
            onSuccess: function() {
                console.log("Connected ");
                updateConnectionStatus("connected");
                mqtt.subscribe("personal/ucfnaps/downhamweather/loop");
                mqtt.subscribe("personal/ucfnaps/eink/met");
            },
            onFailure: function(message) {
                console.log("Connection Attempt to Host " + host + " Failed: ", message.errorMessage);
                updateConnectionStatus("disconnected");
                setTimeout(MQTTconnect, reconnectTimeout);
            }
        });
    }

    function checkConnection() {
        if (!mqtt.isConnected()) {
            console.log("Connection lost. Attempting to reconnect...");
            updateConnectionStatus("reconnecting");
            MQTTconnect();
        }
    }

    // Chart.js setup
    const ctx = document.getElementById('weatherChart').getContext('2d');
    const weatherChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Wind Speed (mph)',
                data: [],
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 3,
                fill: false,
                yAxisID: 'y-axis-1',
                tension: 0.1
            },
            {
                label: 'Temperature (°C)',
                data: [],
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 3,
                fill: false,
                yAxisID: 'y-axis-2',
                tension: 0.1
            },
            {
                label: 'Solar Radiation (W/m²)',
                data: [],
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 3,
                fill: false,
                yAxisID: 'y-axis-3',
                tension: 0.1
            },
            {
                label: 'Rain Amount (mm)',
                data: [],
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 3,
                fill: false,
                yAxisID: 'y-axis-4',
                tension: 0.1
            },
            {
                label: 'Pressure (mbar)',
                data: [],
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 3,
                fill: false,
                yAxisID: 'y-axis-5',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Live Weather Data'
                },
                decimation: {
                    enabled: true,
                    algorithm: 'min-max',
                    samples: 100,
                },
            },
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'minute'
                    },
                    title: {
                        display: true,
                        text: 'Time'
                    }
                },
                'y-axis-1': {
                    type: 'linear',
                    position: 'left',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Wind Speed (mph)'
                    }
                },
                'y-axis-2': {
                    type: 'linear',
                    position: 'right',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    },
                    grid: {
                        drawOnChartArea: false
                    }
                },
                'y-axis-3': {
                    type: 'linear',
                    position: 'right',
                    beginAtZero:true,
                    title: {
                        display: true,
                        text: 'Solar Radiation (W/m²)'
                    },
                    grid: {
                        drawOnChartArea: false
                    }
                },
                'y-axis-4': {
                    type: 'linear',
                    position: 'right',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Rain Amount (mm)'
                    },
                    grid: {
                        drawOnChartArea: false
                    }
                },
                'y-axis-5': {
                    type: 'linear',
                    position: 'right',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Pressure (mbar)'
                    },
                    grid: {
                        drawOnChartArea: false
                    }
                }
            },
            interaction: {
                intersect: false,
                mode: 'nearest',
            },
            elements: {
                line: {
                    cubicInterpolationMode: 'monotone',
                },
            },
        }
    });

    let lastUpdate = Date.now();
    let firstUpdate = true;

    let maxWindSpeed = 0;
    let maxTemp = -Infinity;
    let minTemp = Infinity;
    let maxPressure = -Infinity;
    let minPressure = Infinity;

    function updateWindSpeed(windSpeed, timestamp) {
        console.log(`Received wind speed: ${windSpeed}, Current max: ${maxWindSpeed}`);
        weatherChart.data.labels.push(timestamp);
        weatherChart.data.datasets[0].data.push(windSpeed);

        if (windSpeed > maxWindSpeed - 0.1) {
            maxWindSpeed = windSpeed;
            document.getElementById('maxWindSpeed').innerText = `Max Wind Speed: ${maxWindSpeed} mph`;
        }

        if (weatherChart.data.labels.length > 1440 * 24) {
            weatherChart.data.labels.shift();
            weatherChart.data.datasets[0].data.shift();
        }

        weatherChart.update();
    }

    function updateOtherMetrics(temperature, solarRadiation, rainAmount, pressure, timestamp) {
        weatherChart.data.datasets[1].data.push({x: timestamp, y: temperature});
        weatherChart.data.datasets[2].data.push({x: timestamp, y: solarRadiation});
        weatherChart.data.datasets[3].data.push({x: timestamp, y: rainAmount > 0 ? rainAmount : null});
        weatherChart.data.datasets[4].data.push({x: timestamp, y: pressure});

        console.log(`Current maxTemp: ${maxTemp}, new temperature: ${temperature}`);
        console.log(`Current minTemp: ${minTemp}, new temperature: ${temperature}`);
        console.log(`Current maxPressure: ${maxPressure}, new pressure: ${pressure}`);
        console.log(`Current minPressure: ${minPressure}, new pressure: ${pressure}`);

        if (temperature > maxTemp) {
            maxTemp = temperature;
            document.getElementById('maxTemp').innerText = `Max Temperature: ${maxTemp} °C`;
            console.log(`Updated maxTemp: ${maxTemp}`);
        }
        if (temperature < minTemp) {
            minTemp = temperature;
            document.getElementById('minTemp').innerText = `Min Temperature: ${minTemp} °C`;
            console.log(`Updated minTemp: ${minTemp}`);
        }

        if (pressure > maxPressure) {
            maxPressure = pressure;
            document.getElementById('maxPressure').innerText = `Max Pressure: ${maxPressure} mbar`;
            console.log(`Updated maxPressure: ${maxPressure}`);
        }
        if (pressure < minPressure) {
            minPressure = pressure;
            document.getElementById('minPressure').innerText = `Min Pressure: ${minPressure} mbar`;
            console.log(`Updated minPressure: ${minPressure}`);
        }

        if (weatherChart.data.labels.length > 1440 * 24) {
            weatherChart.data.datasets[1].data.shift();
            weatherChart.data.datasets[2].data.shift();
            weatherChart.data.datasets[3].data.shift();
            weatherChart.data.datasets[4].data.shift();
        }

        weatherChart.update();
    }

    function updateForecast(forecast) {
        document.getElementById('forecast').innerText = `Forecast: ${forecast}`;
    }

    function onMessageArrived(message) {
        console.log("Message Arrived: " + message.destinationName + " : " + message.payloadString);
        if (message.destinationName === "personal/ucfnaps/downhamweather/loop") {
            const data = JSON.parse(message.payloadString);
            const windSpeed = data['windSpeed_mph'];
            const temperature = data['outTemp_C'];
            const solarRadiation = data['radiation_Wpm2'];
            const rainAmount = data['dayRain_mm'];
            const pressure = data['pressure_mbar'];

            const nowTimestamp = new Date();

            updateWindSpeed(windSpeed, nowTimestamp);

            if (firstUpdate || Date.now() - lastUpdate >= 60000) {
                updateOtherMetrics(temperature, solarRadiation, rainAmount, pressure, nowTimestamp);
                lastUpdate = Date.now();
                firstUpdate = false;
            }

            pulseDot();
        } else if (message.destinationName === "personal/ucfnaps/eink/met") {
            const forecast = message.payloadString + " Source UK Met Office";
            updateForecast(forecast);
        }
    }

    document.addEventListener("visibilitychange", function() {
        if (!document.hidden) {
            console.log("Tab is active again. Checking connection...");
            checkConnection();
        }
    });

    window.onload = function() {
        MQTTconnect();
        setInterval(checkConnection, 30000); // Check connection every 30 seconds
    }
</script>
</body>
</html>
